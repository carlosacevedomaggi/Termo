{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chickynice/Desktop/termo/src/store/cart.ts"],"sourcesContent":["\"use client\"\r\nimport { create } from 'zustand'\r\n\r\nexport type CartItem = {\r\n  id: string\r\n  name: string\r\n  price: number\r\n  quantity?: number\r\n}\r\n\r\ntype CartState = {\r\n  items: CartItem[]\r\n  addItem: (item: Omit<CartItem, 'quantity'>) => void\r\n  removeItem: (id: string) => void\r\n  clear: () => void\r\n}\r\n\r\nconst STORAGE_KEY = 'termo.cart.v1'\r\n\r\nconst load = (): CartItem[] => {\r\n  if (typeof window === 'undefined') return []\r\n  try {\r\n    const raw = window.localStorage.getItem(STORAGE_KEY)\r\n    return raw ? JSON.parse(raw) : []\r\n  } catch {\r\n    return []\r\n  }\r\n}\r\n\r\nconst save = (items: CartItem[]) => {\r\n  if (typeof window === 'undefined') return\r\n  try { window.localStorage.setItem(STORAGE_KEY, JSON.stringify(items)) } catch {}\r\n}\r\n\r\nexport const useCartStore = create<CartState>((set, get) => ({\r\n  items: load(),\r\n  addItem: (item) => set(() => {\r\n    const existing = get().items.find(i => i.id === item.id)\r\n    const updated = existing\r\n      ? get().items.map(i => i.id === item.id ? { ...i, quantity: (i.quantity ?? 1) + 1 } : i)\r\n      : [...get().items, { ...item, quantity: 1 }]\r\n    save(updated)\r\n    return { items: updated }\r\n  }),\r\n  removeItem: (id) => set(() => {\r\n    const updated = get().items.filter(i => i.id !== id)\r\n    save(updated)\r\n    return { items: updated }\r\n  }),\r\n  clear: () => set(() => { save([]); return { items: [] } })\r\n}))\r\n\r\n\r\n"],"names":[],"mappings":";;;;AACA;AADA;;AAiBA,MAAM,cAAc;AAEpB,MAAM,OAAO;IACX,wCAAmC,OAAO,EAAE;;;AAO9C;AAEA,MAAM,OAAO,CAAC;IACZ,wCAAmC;;;AAErC;AAEO,MAAM,eAAe,IAAA,kJAAM,EAAY,CAAC,KAAK,MAAQ,CAAC;QAC3D,OAAO;QACP,SAAS,CAAC,OAAS,IAAI;gBACrB,MAAM,WAAW,MAAM,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,EAAE;gBACvD,MAAM,UAAU,WACZ,MAAM,KAAK,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,KAAK,EAAE,GAAG;wBAAE,GAAG,CAAC;wBAAE,UAAU,CAAC,EAAE,QAAQ,IAAI,CAAC,IAAI;oBAAE,IAAI,KACpF;uBAAI,MAAM,KAAK;oBAAE;wBAAE,GAAG,IAAI;wBAAE,UAAU;oBAAE;iBAAE;gBAC9C,KAAK;gBACL,OAAO;oBAAE,OAAO;gBAAQ;YAC1B;QACA,YAAY,CAAC,KAAO,IAAI;gBACtB,MAAM,UAAU,MAAM,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;gBACjD,KAAK;gBACL,OAAO;oBAAE,OAAO;gBAAQ;YAC1B;QACA,OAAO,IAAM,IAAI;gBAAQ,KAAK,EAAE;gBAAG,OAAO;oBAAE,OAAO,EAAE;gBAAC;YAAE;IAC1D,CAAC","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chickynice/Desktop/termo/src/app/ui/CartButton.tsx"],"sourcesContent":["\"use client\"\r\nimport Link from 'next/link'\r\nimport { useCartStore } from '@/store/cart'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport default function CartButton() {\r\n  const items = useCartStore(s => s.items)\r\n  const count = items.reduce((acc, i) => acc + (i.quantity ?? 1), 0)\r\n  const [mounted, setMounted] = useState(false)\r\n  useEffect(() => setMounted(true), [])\r\n  return (\r\n    <Link href=\"/cart\" className=\"relative border px-3 py-1.5 rounded-md\">\r\n      Cart\r\n      {mounted && count > 0 && (\r\n        <span className=\"absolute -top-2 -right-2 bg-black text-white text-xs rounded-full h-5 min-w-5 px-1.5 flex items-center justify-center\">\r\n          {count}\r\n        </span>\r\n      )}\r\n    </Link>\r\n  )\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AAHA;;;;;AAKe,SAAS;IACtB,MAAM,QAAQ,IAAA,oIAAY,EAAC,CAAA,IAAK,EAAE,KAAK;IACvC,MAAM,QAAQ,MAAM,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,CAAC,EAAE,QAAQ,IAAI,CAAC,GAAG;IAChE,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,IAAA,kNAAS,EAAC,IAAM,WAAW,OAAO,EAAE;IACpC,qBACE,8OAAC,uKAAI;QAAC,MAAK;QAAQ,WAAU;;YAAyC;YAEnE,WAAW,QAAQ,mBAClB,8OAAC;gBAAK,WAAU;0BACb;;;;;;;;;;;;AAKX","debugId":null}}]
}