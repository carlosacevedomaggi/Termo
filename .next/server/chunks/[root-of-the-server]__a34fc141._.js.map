{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chickynice/Desktop/termo/src/app/api/geocode/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\n\r\nconst ORS_KEY = process.env.ORS_API_KEY\r\n\r\nexport async function POST(request: Request) {\r\n  if (!ORS_KEY) {\r\n    return NextResponse.json({ error: \"ORS key not configured\" }, { status: 500 })\r\n  }\r\n\r\n  const body = await request.json().catch(() => null)\r\n  if (!body || typeof body.query !== \"string\" || !body.query.trim()) {\r\n    return NextResponse.json({ error: \"Query is required\" }, { status: 400 })\r\n  }\r\n\r\n  const url = new URL(\"https://api.openrouteservice.org/geocode/search\")\r\n  url.searchParams.set(\"text\", body.query.trim())\r\n  url.searchParams.set(\"boundary.country\", \"VE\")\r\n  url.searchParams.set(\"size\", body.limit ? String(body.limit) : \"5\")\r\n\r\n  const response = await fetch(url.toString(), {\r\n    headers: {\r\n      Authorization: ORS_KEY,\r\n    },\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const text = await response.text()\r\n    return NextResponse.json({ error: text || \"Failed to geocode\" }, { status: response.status })\r\n  }\r\n\r\n  const data = await response.json()\r\n  const results = (data.features ?? []).map((feature: any, index: number) => ({\r\n    id: feature.properties?.id ?? `${feature.properties?.osm_id ?? index}`,\r\n    label: feature.properties?.label ?? feature.properties?.name ?? body.query,\r\n    name: feature.properties?.name ?? feature.properties?.label ?? body.query,\r\n    locality: feature.properties?.locality ?? feature.properties?.region ?? \"\",\r\n    lat: feature.geometry?.coordinates?.[1],\r\n    lng: feature.geometry?.coordinates?.[0],\r\n  })).filter((item: any) => typeof item.lat === \"number\" && typeof item.lng === \"number\")\r\n\r\n  return NextResponse.json({ results })\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW;AAEhC,eAAe,KAAK,OAAgB;IACzC,IAAI,CAAC,SAAS;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IAEA,MAAM,OAAO,MAAM,QAAQ,IAAI,GAAG,KAAK,CAAC,IAAM;IAC9C,IAAI,CAAC,QAAQ,OAAO,KAAK,KAAK,KAAK,YAAY,CAAC,KAAK,KAAK,CAAC,IAAI,IAAI;QACjE,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,MAAM,IAAI,IAAI;IACpB,IAAI,YAAY,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,IAAI;IAC5C,IAAI,YAAY,CAAC,GAAG,CAAC,oBAAoB;IACzC,IAAI,YAAY,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,GAAG,OAAO,KAAK,KAAK,IAAI;IAE/D,MAAM,WAAW,MAAM,MAAM,IAAI,QAAQ,IAAI;QAC3C,SAAS;YACP,eAAe;QACjB;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO,QAAQ;QAAoB,GAAG;YAAE,QAAQ,SAAS,MAAM;QAAC;IAC7F;IAEA,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,MAAM,UAAU,CAAC,KAAK,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,SAAc,QAAkB,CAAC;YAC1E,IAAI,QAAQ,UAAU,EAAE,MAAM,GAAG,QAAQ,UAAU,EAAE,UAAU,OAAO;YACtE,OAAO,QAAQ,UAAU,EAAE,SAAS,QAAQ,UAAU,EAAE,QAAQ,KAAK,KAAK;YAC1E,MAAM,QAAQ,UAAU,EAAE,QAAQ,QAAQ,UAAU,EAAE,SAAS,KAAK,KAAK;YACzE,UAAU,QAAQ,UAAU,EAAE,YAAY,QAAQ,UAAU,EAAE,UAAU;YACxE,KAAK,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE;YACvC,KAAK,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE;QACzC,CAAC,GAAG,MAAM,CAAC,CAAC,OAAc,OAAO,KAAK,GAAG,KAAK,YAAY,OAAO,KAAK,GAAG,KAAK;IAE9E,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE;IAAQ;AACrC","debugId":null}}]
}