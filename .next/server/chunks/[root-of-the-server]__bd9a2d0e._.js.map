{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/chickynice/Desktop/termo/src/app/api/directions/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\n\r\nconst ORS_KEY = process.env.ORS_API_KEY\r\n\r\nexport async function POST(request: Request) {\r\n  if (!ORS_KEY) {\r\n    return NextResponse.json({ error: \"ORS key not configured\" }, { status: 500 })\r\n  }\r\n\r\n  const body = await request.json().catch(() => null)\r\n  if (!body || !body.start || !body.end) {\r\n    return NextResponse.json({ error: \"start and end coordinates required\" }, { status: 400 })\r\n  }\r\n\r\n  const { start, end } = body as {\r\n    start: { lat: number; lng: number }\r\n    end: { lat: number; lng: number }\r\n  }\r\n\r\n  if (typeof start?.lat !== \"number\" || typeof start?.lng !== \"number\" || typeof end?.lat !== \"number\" || typeof end?.lng !== \"number\") {\r\n    return NextResponse.json({ error: \"Invalid coordinates\" }, { status: 400 })\r\n  }\r\n\r\n  const response = await fetch(\"https://api.openrouteservice.org/v2/directions/driving-car\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: ORS_KEY,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      coordinates: [\r\n        [start.lng, start.lat],\r\n        [end.lng, end.lat],\r\n      ],\r\n    }),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    const text = await response.text()\r\n    return NextResponse.json({ error: text || \"Failed to get directions\" }, { status: response.status })\r\n  }\r\n\r\n  const data = await response.json()\r\n  const summary = data.features?.[0]?.properties?.summary\r\n  if (!summary) {\r\n    return NextResponse.json({ error: \"No route summary\" }, { status: 502 })\r\n  }\r\n\r\n  return NextResponse.json({\r\n    duration: summary.duration, // seconds\r\n    distance: summary.distance, // meters\r\n  })\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,UAAU,QAAQ,GAAG,CAAC,WAAW;AAEhC,eAAe,KAAK,OAAgB;IACzC,IAAI,CAAC,SAAS;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;IAEA,MAAM,OAAO,MAAM,QAAQ,IAAI,GAAG,KAAK,CAAC,IAAM;IAC9C,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE;QACrC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAqC,GAAG;YAAE,QAAQ;QAAI;IAC1F;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG;IAKvB,IAAI,OAAO,OAAO,QAAQ,YAAY,OAAO,OAAO,QAAQ,YAAY,OAAO,KAAK,QAAQ,YAAY,OAAO,KAAK,QAAQ,UAAU;QACpI,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,WAAW,MAAM,MAAM,8DAA8D;QACzF,QAAQ;QACR,SAAS;YACP,eAAe;YACf,gBAAgB;QAClB;QACA,MAAM,KAAK,SAAS,CAAC;YACnB,aAAa;gBACX;oBAAC,MAAM,GAAG;oBAAE,MAAM,GAAG;iBAAC;gBACtB;oBAAC,IAAI,GAAG;oBAAE,IAAI,GAAG;iBAAC;aACnB;QACH;IACF;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO,QAAQ;QAA2B,GAAG;YAAE,QAAQ,SAAS,MAAM;QAAC;IACpG;IAEA,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,MAAM,UAAU,KAAK,QAAQ,EAAE,CAAC,EAAE,EAAE,YAAY;IAChD,IAAI,CAAC,SAAS;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;QACvB,UAAU,QAAQ,QAAQ;QAC1B,UAAU,QAAQ,QAAQ;IAC5B;AACF","debugId":null}}]
}